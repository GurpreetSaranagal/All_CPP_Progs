The property of giving additional meaning to existing operators so that they can work with with variables of ser defined type is called operator overloading.
Providing additional meaning to existing operator by overloading it, doesn't change the original meaning of the operator but it simply extenets the functionality of the operator.

SYNTAX FOR OPERATOR OVERLOADING 
In order to give additional meaning to an operator, we need to overload it by creating an operator function. An operator function difines the operation thet the overloading operator will perform when used with the objects of a relative class. An operator funtion can be a member funtion of class or a non-member funtion ( friend funtion ) of the class. However the way of making a member operator function and a non-member function is different.
    The syntax for defining an MEMBER OPERATOR FUNCTION the class is as follows

a). When declared inside and defined outside the class 
    return_type classname::operator#(argument_list)
    {
        /body of function/
    }
b). When defined inside the class 
    return_type operator#(argument_list) {...}

The operator distinguishes an operator function from ordinary member funtion of class by the keyword operator.
The operators that can be overloaded are
+   -   *   /   %   ^   &   |   ~   !   =   <   >   +=  -=  *=  /=  %=  ^=  &=  |=  <<  >>  <<= >>= ==  !=  <=  >=  &&  ||  ++  --  ->* ,   ->  []  ()  new delete new[]    delete[]

The operators that cannot be overloaded
.   .*   ::   ?: